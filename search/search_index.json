{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jacob Rider Professional Summary I am a math and data enthusiast looking for a position where I can build probabilistic models of complex data in order to inform decision making (with a little bit of help from generative AI). In my most recent jobs, I learned the extract, transform, and load (ETL) process using a variety of methods. I also have experience creating dashboards and KPIs using Tableau and Excel. I believe these experiences uniquely position me to own the data modeling process from end-to-end. Skills: Python, SQL, AWS, Tableau, Excel Passions: Generative AI, probabilistic programming, and data modeling Soft Skills: Concise and courteous communication Hobbies: Board games, travel, and food jacob.rider34@gmail.com | LinkedIn | GitHub | Website Experience | Education | Skills | Projects | Contact","title":"Home"},{"location":"#jacob-rider","text":"","title":"Jacob Rider"},{"location":"#professional-summary","text":"I am a math and data enthusiast looking for a position where I can build probabilistic models of complex data in order to inform decision making (with a little bit of help from generative AI). In my most recent jobs, I learned the extract, transform, and load (ETL) process using a variety of methods. I also have experience creating dashboards and KPIs using Tableau and Excel. I believe these experiences uniquely position me to own the data modeling process from end-to-end. Skills: Python, SQL, AWS, Tableau, Excel Passions: Generative AI, probabilistic programming, and data modeling Soft Skills: Concise and courteous communication Hobbies: Board games, travel, and food jacob.rider34@gmail.com | LinkedIn | GitHub | Website Experience | Education | Skills | Projects | Contact","title":"Professional Summary"},{"location":"baseball_pitch_predictor/","text":"Baseball Pitch Predictor View Project on GitHub Technologies Used Python Jax Flax Project Overview Created a predictive model to analyze and forecast baseball pitch types based on historical pitch data. This model assists teams and analysts in anticipating the types of pitches likely to be thrown in different game situations, offering a strategic edge in preparation and in-game decision-making. Key Features Advanced machine learning techniques for accurate pitch type prediction. Analysis of historical pitch data to identify patterns and trends. Real-time prediction capabilities to support immediate strategic decisions. Impact The Baseball Pitch Predictor has empowered teams with enhanced strategic planning capabilities, allowing for more informed decisions against opposing pitchers.","title":"Baseball Pitch Predictor"},{"location":"baseball_pitch_predictor/#baseball-pitch-predictor","text":"View Project on GitHub","title":"Baseball Pitch Predictor"},{"location":"baseball_pitch_predictor/#technologies-used","text":"Python Jax Flax","title":"Technologies Used"},{"location":"baseball_pitch_predictor/#project-overview","text":"Created a predictive model to analyze and forecast baseball pitch types based on historical pitch data. This model assists teams and analysts in anticipating the types of pitches likely to be thrown in different game situations, offering a strategic edge in preparation and in-game decision-making.","title":"Project Overview"},{"location":"baseball_pitch_predictor/#key-features","text":"Advanced machine learning techniques for accurate pitch type prediction. Analysis of historical pitch data to identify patterns and trends. Real-time prediction capabilities to support immediate strategic decisions.","title":"Key Features"},{"location":"baseball_pitch_predictor/#impact","text":"The Baseball Pitch Predictor has empowered teams with enhanced strategic planning capabilities, allowing for more informed decisions against opposing pitchers.","title":"Impact"},{"location":"data_tools/","text":"Data Tools for Economic Research View Project on GitHub Technologies Used Python SQL Project Overview Developed a suite of data analysis tools tailored for economic research, facilitating the efficient cleaning, processing, and ingestion of economic and financial API data into a SQLite database. Key Features Automated data cleaning and processing workflows. Ingestion of diverse economic and financial data into a unified database. Simplified access to clean, processed data for economic research and analysis.","title":"Data Tools for Economic Research"},{"location":"data_tools/#data-tools-for-economic-research","text":"View Project on GitHub","title":"Data Tools for Economic Research"},{"location":"data_tools/#technologies-used","text":"Python SQL","title":"Technologies Used"},{"location":"data_tools/#project-overview","text":"Developed a suite of data analysis tools tailored for economic research, facilitating the efficient cleaning, processing, and ingestion of economic and financial API data into a SQLite database.","title":"Project Overview"},{"location":"data_tools/#key-features","text":"Automated data cleaning and processing workflows. Ingestion of diverse economic and financial data into a unified database. Simplified access to clean, processed data for economic research and analysis.","title":"Key Features"},{"location":"education/","text":"Education Bachelor of Science in Mathematics and Economics Georgia State University, Atlanta, GA | Class of 2020 Completed a comprehensive curriculum focusing on rigorous math courses, quantitative analysis, statistical methods, and economic theory. Led a team project modeling asset bubbles with physics equations, using Bloomberg data for model calibration. Collaborated with the Molkov Theoretical Neuroscience Research Group by developing visualizations for experimental data using Matplotlib and Python to model the feedback mechanisms that underlie the cardio-respiratory system. Certifications Tableau Data Analyst Tableau Desktop Specialist","title":"Education"},{"location":"education/#education","text":"","title":"Education"},{"location":"education/#bachelor-of-science-in-mathematics-and-economics","text":"Georgia State University, Atlanta, GA | Class of 2020 Completed a comprehensive curriculum focusing on rigorous math courses, quantitative analysis, statistical methods, and economic theory. Led a team project modeling asset bubbles with physics equations, using Bloomberg data for model calibration. Collaborated with the Molkov Theoretical Neuroscience Research Group by developing visualizations for experimental data using Matplotlib and Python to model the feedback mechanisms that underlie the cardio-respiratory system.","title":"Bachelor of Science in Mathematics and Economics"},{"location":"education/#certifications","text":"Tableau Data Analyst Tableau Desktop Specialist","title":"Certifications"},{"location":"experience/","text":"Professional Experience Associate Data Engineer Delta Air Lines Atlanta, GA | June 2022 \u2013 Present Developed and maintained scalable data pipelines and implemented ETL processes to support analytics and business intelligence (BI) reporting. Collaborated with cross-functional teams to understand data needs, leading the design and implementation of Tableau dashboards. Utilized Python and SQL for data manipulation, cleaning, and analysis, improving data accuracy and utility across departments. Played a key role in the migration of legacy systems to AWS, ensuring minimal downtime and data integrity. Logistics Document Specialist Mercedes-Benz USA, LLC Atlanta, GA | March 2021 \u2013 December 2021 Managed and streamlined the documentation process for logistics operations, enhancing the efficiency of shipment and delivery schedules. Created VBA macros that query the SAP HANA database and automatically generate KPIs in order to drive monthly performance reviews for each carrier. Built and implemented a Python script to parse through emails based on a given set of keywords in order to improve data quality and reduce time spent aggregating VINs and PO numbers. Automated routine management reports using Excel, VBA, SAP, and Python saving approximately 50 hours per month for key logistics personnel. Contributed to the development of training materials and procedures for new team members, ensuring consistent and accurate document handling.","title":"Experience"},{"location":"experience/#professional-experience","text":"","title":"Professional Experience"},{"location":"experience/#associate-data-engineer","text":"","title":"Associate Data Engineer"},{"location":"experience/#delta-air-lines","text":"Atlanta, GA | June 2022 \u2013 Present Developed and maintained scalable data pipelines and implemented ETL processes to support analytics and business intelligence (BI) reporting. Collaborated with cross-functional teams to understand data needs, leading the design and implementation of Tableau dashboards. Utilized Python and SQL for data manipulation, cleaning, and analysis, improving data accuracy and utility across departments. Played a key role in the migration of legacy systems to AWS, ensuring minimal downtime and data integrity.","title":"Delta Air Lines"},{"location":"experience/#logistics-document-specialist","text":"","title":"Logistics Document Specialist"},{"location":"experience/#mercedes-benz-usa-llc","text":"Atlanta, GA | March 2021 \u2013 December 2021 Managed and streamlined the documentation process for logistics operations, enhancing the efficiency of shipment and delivery schedules. Created VBA macros that query the SAP HANA database and automatically generate KPIs in order to drive monthly performance reviews for each carrier. Built and implemented a Python script to parse through emails based on a given set of keywords in order to improve data quality and reduce time spent aggregating VINs and PO numbers. Automated routine management reports using Excel, VBA, SAP, and Python saving approximately 50 hours per month for key logistics personnel. Contributed to the development of training materials and procedures for new team members, ensuring consistent and accurate document handling.","title":"Mercedes-Benz USA, LLC"},{"location":"projects/","text":"Projects TI4 Combat Simulator Technologies Used : Python, Jax, NumPyro Developed a combat simulator for the board game \"Twilight Imperium 4th Edition\" (TI4), utilizing Monte Carlo and probability theory to model the distribution of outcomes for in-game combat scenarios. Baseball Pitch Predictor Technologies Used : Python, Jax, Flax Created a predictive model to analyze and forecast baseball pitch types based on historical pitch data. Probabilistic Programming Tools Technologies Used : Python, NumPy, Jax, NumPyro Designed a stock market simulation tool that simulates a random levy process and then uses NumPyro infers the parameters used to simulate those processes. Data Tools for Economic Research Technologies Used : Python, SQL Developed a suite of data analysis tools tailored for economic research and the cleaning and ingestion of economic and financial API data into a SQLite database.","title":"Projects"},{"location":"projects/#projects","text":"","title":"Projects"},{"location":"projects/#ti4-combat-simulator","text":"Technologies Used : Python, Jax, NumPyro Developed a combat simulator for the board game \"Twilight Imperium 4th Edition\" (TI4), utilizing Monte Carlo and probability theory to model the distribution of outcomes for in-game combat scenarios.","title":"TI4 Combat Simulator"},{"location":"projects/#baseball-pitch-predictor","text":"Technologies Used : Python, Jax, Flax Created a predictive model to analyze and forecast baseball pitch types based on historical pitch data.","title":"Baseball Pitch Predictor"},{"location":"projects/#probabilistic-programming-tools","text":"Technologies Used : Python, NumPy, Jax, NumPyro Designed a stock market simulation tool that simulates a random levy process and then uses NumPyro infers the parameters used to simulate those processes.","title":"Probabilistic Programming Tools"},{"location":"projects/#data-tools-for-economic-research","text":"Technologies Used : Python, SQL Developed a suite of data analysis tools tailored for economic research and the cleaning and ingestion of economic and financial API data into a SQLite database.","title":"Data Tools for Economic Research"},{"location":"random_process_generator/","text":"Probabilistic Programming Tools View Project on GitHub Technologies Used Python NumPy Jax NumPyro Project Overview Designed tools that simulate a random levy process and then uses NumPyro to infer the parameters used to simulate those processes. Key Features Simulation of processes that resemble stock price movements using random levy processes. Parameter inference with NumPyro to understand underlying market dynamics.","title":"Probabilistic Programming Tools"},{"location":"random_process_generator/#probabilistic-programming-tools","text":"View Project on GitHub","title":"Probabilistic Programming Tools"},{"location":"random_process_generator/#technologies-used","text":"Python NumPy Jax NumPyro","title":"Technologies Used"},{"location":"random_process_generator/#project-overview","text":"Designed tools that simulate a random levy process and then uses NumPyro to infer the parameters used to simulate those processes.","title":"Project Overview"},{"location":"random_process_generator/#key-features","text":"Simulation of processes that resemble stock price movements using random levy processes. Parameter inference with NumPyro to understand underlying market dynamics.","title":"Key Features"},{"location":"skills/","text":"Skills Python : Proficient in Python programming for end-to-end data processing and modeling Pandas NumPy Jax NumPyro SQL : Experienced in SQL for database management, querying, and data manipulation AWS : Familiarity with AWS services such as lambda, s3, and athena Tableau : Skilled in using Tableau to inform decision makers with visually appealing and insightful dashboards Excel : Advanced proficiency in Excel Passions Probabilistic Programming : Fascinated by the application of probabilistic programming for building complex models and simulations Generative AI : Interested in exploring the capabilities of generative AI for creating new content and solving unique problems Data Modeling : Passionate about constructing accurate data models to uncover insights and inform strategic decision-making","title":"Skills"},{"location":"skills/#skills","text":"Python : Proficient in Python programming for end-to-end data processing and modeling Pandas NumPy Jax NumPyro SQL : Experienced in SQL for database management, querying, and data manipulation AWS : Familiarity with AWS services such as lambda, s3, and athena Tableau : Skilled in using Tableau to inform decision makers with visually appealing and insightful dashboards Excel : Advanced proficiency in Excel","title":"Skills"},{"location":"skills/#passions","text":"Probabilistic Programming : Fascinated by the application of probabilistic programming for building complex models and simulations Generative AI : Interested in exploring the capabilities of generative AI for creating new content and solving unique problems Data Modeling : Passionate about constructing accurate data models to uncover insights and inform strategic decision-making","title":"Passions"},{"location":"ti4_combat_simulator/","text":"TI4 Combat Simulator View Project on GitHub View Project Documentation Technologies Used Python Jax Project Background Twilight Imperium (TI4) is a grand strategy board game known for its intricate diplomacy, expansive empire-building, and epic space battles. TI4's combat involves a blend of strategic planning and randomness. While unit statistics and player decisions play a significant role, the combat system incorporates elements of randomness through dice rolls. Project Overview This combat simulator for TI4 utilizes Monte Carlo and probability theory to model the distribution of outcomes for in-game combat scenarios. This tool helps players understand the potential outcomes of their strategic decisions in combat, aiding in planning and execution during gameplay. Key Features Monte Carlo simulation methods to predict combat outcomes. Probability theory to sample from combinations of probabilities.","title":"TI4 Combat Simulator"},{"location":"ti4_combat_simulator/#ti4-combat-simulator","text":"View Project on GitHub View Project Documentation","title":"TI4 Combat Simulator"},{"location":"ti4_combat_simulator/#technologies-used","text":"Python Jax","title":"Technologies Used"},{"location":"ti4_combat_simulator/#project-background","text":"Twilight Imperium (TI4) is a grand strategy board game known for its intricate diplomacy, expansive empire-building, and epic space battles. TI4's combat involves a blend of strategic planning and randomness. While unit statistics and player decisions play a significant role, the combat system incorporates elements of randomness through dice rolls.","title":"Project Background"},{"location":"ti4_combat_simulator/#project-overview","text":"This combat simulator for TI4 utilizes Monte Carlo and probability theory to model the distribution of outcomes for in-game combat scenarios. This tool helps players understand the potential outcomes of their strategic decisions in combat, aiding in planning and execution during gameplay.","title":"Project Overview"},{"location":"ti4_combat_simulator/#key-features","text":"Monte Carlo simulation methods to predict combat outcomes. Probability theory to sample from combinations of probabilities.","title":"Key Features"},{"location":"ti4_functions/","text":"ti4_functions This document describes a set of functions for simulating combat scenarios using JAX. Imports import jax import jax.numpy as jnp from jax import random import os from typing import Dict, Tuple, Any Types KeyType = Tuple[int, float] SideType = Dict[KeyType, int] RNGKey = Any Functions apply_hits def apply_hits(side: SideType, hits_scored: int, rng_key: RNGKey) -> SideType: \"\"\" Apply hits to a side with JAX, prioritizing dice with lower hit probabilities and lower health. Incorporates randomness in selecting dice within the same priority level to take hits. Accepts an RNG key for reproducible randomness. Parameters: side (SideType): Dictionary representing the side's units and their stats. hits_scored (int): Number of hits to apply to the side. rng_key (RNGKey): JAX random key for generating random numbers. Returns: SideType: Updated side after applying hits. \"\"\" simulate_combat_round_jax def simulate_combat_round_jax(side_a: SideType, side_b: SideType, rng_key: RNGKey) -> Tuple[SideType, SideType]: \"\"\" Simulates a single round of combat between two sides using JAX. Parameters: side_a (SideType): First combatant side. side_b (SideType): Second combatant side. rng_key (RNGKey): JAX random key for generating random numbers. Returns: Tuple[SideType, SideType]: Updated states of side_a and side_b after combat. \"\"\" run_combat_until_elimination def simulate_combat_round_jax(side_a: SideType, side_b: SideType, rng_key: RNGKey) -> Tuple[SideType, SideType]: \"\"\" Simulates a single round of combat between two sides using JAX. Parameters: side_a (SideType): First combatant side. side_b (SideType): Second combatant side. rng_key (RNGKey): JAX random key for generating random numbers. Returns: Tuple[SideType, SideType]: Updated states of side_a and side_b after combat. \"\"\" monte_carlo_combat_simulation def monte_carlo_combat_simulation(initial_side_a: SideType, initial_side_b: SideType, num_simulations: int = 1000) -> Dict[str, float]: \"\"\" Performs a Monte Carlo simulation of combat between two sides over a specified number of simulations to estimate outcome probabilities. Parameters: initial_side_a (SideType): Initial state of side A. initial_side_b (SideType): Initial state of side B. num_simulations (int): Number of simulations to run. Returns: Dict[str, float]: Probabilities of different outcomes. \"\"\" Example Usage The following is an example of 2 dreadnaughts, each with 2 health hitting 60% of the time fighting vs 6 fighters, each with 1 health hitting 20% of the time. initial_side_a = {(2, 0.6): 3} initial_side_b = {(1, 0.2): 6} num_simulations = 10000 probabilities = monte_carlo_combat_simulation(initial_side_a, initial_side_b, num_simulations) print(probabilities)","title":"TI4 Functions"},{"location":"ti4_functions/#ti4_functions","text":"This document describes a set of functions for simulating combat scenarios using JAX.","title":"ti4_functions"},{"location":"ti4_functions/#imports","text":"import jax import jax.numpy as jnp from jax import random import os from typing import Dict, Tuple, Any","title":"Imports"},{"location":"ti4_functions/#types","text":"KeyType = Tuple[int, float] SideType = Dict[KeyType, int] RNGKey = Any","title":"Types"},{"location":"ti4_functions/#functions","text":"","title":"Functions"},{"location":"ti4_functions/#apply_hits","text":"def apply_hits(side: SideType, hits_scored: int, rng_key: RNGKey) -> SideType: \"\"\" Apply hits to a side with JAX, prioritizing dice with lower hit probabilities and lower health. Incorporates randomness in selecting dice within the same priority level to take hits. Accepts an RNG key for reproducible randomness. Parameters: side (SideType): Dictionary representing the side's units and their stats. hits_scored (int): Number of hits to apply to the side. rng_key (RNGKey): JAX random key for generating random numbers. Returns: SideType: Updated side after applying hits. \"\"\"","title":"apply_hits"},{"location":"ti4_functions/#simulate_combat_round_jax","text":"def simulate_combat_round_jax(side_a: SideType, side_b: SideType, rng_key: RNGKey) -> Tuple[SideType, SideType]: \"\"\" Simulates a single round of combat between two sides using JAX. Parameters: side_a (SideType): First combatant side. side_b (SideType): Second combatant side. rng_key (RNGKey): JAX random key for generating random numbers. Returns: Tuple[SideType, SideType]: Updated states of side_a and side_b after combat. \"\"\"","title":"simulate_combat_round_jax"},{"location":"ti4_functions/#run_combat_until_elimination","text":"def simulate_combat_round_jax(side_a: SideType, side_b: SideType, rng_key: RNGKey) -> Tuple[SideType, SideType]: \"\"\" Simulates a single round of combat between two sides using JAX. Parameters: side_a (SideType): First combatant side. side_b (SideType): Second combatant side. rng_key (RNGKey): JAX random key for generating random numbers. Returns: Tuple[SideType, SideType]: Updated states of side_a and side_b after combat. \"\"\"","title":"run_combat_until_elimination"},{"location":"ti4_functions/#monte_carlo_combat_simulation","text":"def monte_carlo_combat_simulation(initial_side_a: SideType, initial_side_b: SideType, num_simulations: int = 1000) -> Dict[str, float]: \"\"\" Performs a Monte Carlo simulation of combat between two sides over a specified number of simulations to estimate outcome probabilities. Parameters: initial_side_a (SideType): Initial state of side A. initial_side_b (SideType): Initial state of side B. num_simulations (int): Number of simulations to run. Returns: Dict[str, float]: Probabilities of different outcomes. \"\"\"","title":"monte_carlo_combat_simulation"},{"location":"ti4_functions/#example-usage","text":"The following is an example of 2 dreadnaughts, each with 2 health hitting 60% of the time fighting vs 6 fighters, each with 1 health hitting 20% of the time. initial_side_a = {(2, 0.6): 3} initial_side_b = {(1, 0.2): 6} num_simulations = 10000 probabilities = monte_carlo_combat_simulation(initial_side_a, initial_side_b, num_simulations) print(probabilities)","title":"Example Usage"}]}